import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.*;

public class PDFSearcher {
    private JTextField entradaNumero;
    private JTextField entradaDiretorio;
    private JProgressBar progressBar;
    private JFrame progressFrame;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(PDFSearcher::new);
    }

    public PDFSearcher() {
        JFrame frame = new JFrame("Buscar em PDF");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(310, 120);
        frame.setResizable(false);

        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.insets = new Insets(5, 5, 5, 5);

        c.gridx = 0;
        c.gridy = 0;
        panel.add(new JLabel("Número:"), c);

        entradaNumero = new JTextField(20);
        c.gridx = 1;
        c.gridy = 0;
        panel.add(entradaNumero, c);

        c.gridx = 0;
        c.gridy = 1;
        panel.add(new JLabel("Diretório:"), c);

        entradaDiretorio = new JTextField(20);
        c.gridx = 1;
        c.gridy = 1;
        panel.add(entradaDiretorio, c);

        JButton buscarButton = new JButton("Buscar Número");
        buscarButton.addActionListener(e -> buscarNumero());
        c.gridx = 0;
        c.gridy = 2;
        panel.add(buscarButton, c);

        JButton selecionarButton = new JButton("Selecionar Diretório");
        selecionarButton.addActionListener(e -> selecionarDiretorio());
        c.gridx = 1;
        c.gridy = 2;
        panel.add(selecionarButton, c);

        frame.add(panel);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void buscarNumero() {
        String numero = entradaNumero.getText();
        String diretorio = entradaDiretorio.getText();

        if (numero.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, insira um número para buscar.");
            return;
        }
        if (diretorio.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione um diretório válido.");
            return;
        }

        progressFrame = new JFrame("Aguarde...");
        progressFrame.setSize(300, 100);
        progressFrame.setResizable(false);
        progressFrame.setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        JLabel label = new JLabel("Buscando arquivo, por favor aguarde...");
        panel.add(label, BorderLayout.NORTH);

        progressBar = new JProgressBar(0, 100);
        panel.add(progressBar, BorderLayout.CENTER);

        progressFrame.add(panel);
        progressFrame.setVisible(true);

        ExecutorService executor = Executors.newSingleThreadExecutor();
        executor.submit(() -> {
            List<String> resultados = buscarNumeroEmPdf(numero, new File(diretorio));
            SwingUtilities.invokeLater(() -> {
                progressFrame.dispose();
                mostrarResultados(resultados);
            });
        });
        executor.shutdown();
    }

    private List<String> buscarNumeroEmPdf(String numero, File diretorio) {
        List<String> resultados = new ArrayList<>();
        File[] arquivos = diretorio.listFiles((dir, name) -> name.endsWith(".pdf"));

        if (arquivos == null) return resultados;

        int totalArquivos = arquivos.length;
        int progress = 0;

        for (File arquivo : arquivos) {
            try (PDDocument documento = PDDocument.load(arquivo)) {
                PDFTextStripper pdfStripper = new PDFTextStripper();
                String texto = pdfStripper.getText(documento);

                if (texto.contains(numero)) {
                    resultados.add("Arquivo: " + arquivo.getName() + " - Pasta: " + arquivo.getParent());
                }
            } catch (IOException e) {
                System.err.println("Erro ao processar o arquivo " + arquivo.getName() + ": " + e.getMessage());
            }

            progress++;
            int progressPercent = (int) (((double) progress / totalArquivos) * 100);
            SwingUtilities.invokeLater(() -> progressBar.setValue(progressPercent));
        }

        return resultados;
    }

    private void mostrarResultados(List<String> resultados) {
        if (!resultados.isEmpty()) {
            StringBuilder mensagem = new StringBuilder("O número foi encontrado nos seguintes arquivos:\n");
            for (String resultado : resultados) {
                mensagem.append(resultado).append("\n");
            }
            JOptionPane.showMessageDialog(null, mensagem.toString());
        } else {
            JOptionPane.showMessageDialog(null, "O número não foi encontrado em nenhum arquivo PDF no diretório.");
        }
    }

    private void selecionarDiretorio() {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            entradaDiretorio.setText(chooser.getSelectedFile().getPath());
        }
    }
}
